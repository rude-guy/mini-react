(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for('react.element')
      : 0xeac7;

  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark_ref: 'mark',
      };
      return element;
  };
  const jsx = function (type, config, ...maybeChildren) {
      const props = {};
      let key = null;
      let ref = null;
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key') {
              if (val !== undefined) {
                  key = `${val}`;
              }
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          if (Object.hasOwn(config, prop)) {
              props[prop] = val;
          }
      }
      const maybeChildrenLength = maybeChildren.length;
      if (maybeChildrenLength) {
          if (maybeChildrenLength === 1) {
              props.children = maybeChildren[0];
          }
          else {
              props.children = maybeChildren;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  function isValidElement$1(obj) {
      return (typeof obj === 'object' &&
          obj !== null &&
          obj.$$typeof === REACT_ELEMENT_TYPE);
  }

  const currentDispatcher = {
      current: null,
  };
  const resolveDispatcher = () => {
      const dispatcher = currentDispatcher.current;
      if (dispatcher === null) {
          throw new Error('hooks 只能在 react 函数组件中调用');
      }
      return dispatcher;
  };

  const useState = (initialState) => {
      const dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
  };
  const useEffect = (create, deps) => {
      const dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, deps);
  };
  // 内部数据共享层
  const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
      currentDispatcher,
  };
  const version = '0.0.0';
  // TODO: 根据环境区分 jsx/jsxDEV
  const createElement = jsx;
  const isValidElement = isValidElement$1;

  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.createElement = createElement;
  exports.isValidElement = isValidElement;
  exports.useEffect = useEffect;
  exports.useState = useState;
  exports.version = version;

}));
